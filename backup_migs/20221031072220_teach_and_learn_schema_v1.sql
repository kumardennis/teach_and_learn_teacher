-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Extension: pg_net

-- DROP EXTENSION pg_net;

CREATE EXTENSION IF NOT EXISTS pg_net
    SCHEMA extensions
    VERSION "0.6";

    CREATE TABLE IF NOT EXISTS public."Teachers"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "schoolId" uuid,
    "firstName" text COLLATE pg_catalog."default",
    "lastName" text COLLATE pg_catalog."default",
    "profileImage" text COLLATE pg_catalog."default",
    rating real,
    "proofOfAuthenticity" text COLLATE pg_catalog."default",
    "proofOfIdentity" text COLLATE pg_catalog."default",
    "allEarnings" numeric,
    "amountToBePaid" numeric,
    CONSTRAINT "Teachers_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Teachers"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Teachers"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Teachers" TO anon;

GRANT ALL ON TABLE public."Teachers" TO authenticated;

GRANT ALL ON TABLE public."Teachers" TO postgres;

GRANT ALL ON TABLE public."Teachers" TO service_role;

GRANT ALL ON TABLE public."Teachers" TO supabase_admin;

    CREATE TABLE IF NOT EXISTS public."Students"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "schoolId" uuid,
    "firstName" text COLLATE pg_catalog."default",
    "lastName" text COLLATE pg_catalog."default",
    "profileImage" text COLLATE pg_catalog."default",
    rating real,
    "proofOfIdentity" text COLLATE pg_catalog."default",
    CONSTRAINT "Students_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Students"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Students"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Students" TO anon;

GRANT ALL ON TABLE public."Students" TO authenticated;

GRANT ALL ON TABLE public."Students" TO postgres;

GRANT ALL ON TABLE public."Students" TO service_role;

GRANT ALL ON TABLE public."Students" TO supabase_admin;

    CREATE TABLE IF NOT EXISTS public."Categories"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    picture text COLLATE pg_catalog."default",
    CONSTRAINT "Categories_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Categories"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Categories"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Categories" TO anon;

GRANT ALL ON TABLE public."Categories" TO authenticated;

GRANT ALL ON TABLE public."Categories" TO postgres;

GRANT ALL ON TABLE public."Categories" TO service_role;

GRANT ALL ON TABLE public."Categories" TO supabase_admin;

CREATE TABLE IF NOT EXISTS public."Children"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "schoolId" uuid,
    "firstName" text COLLATE pg_catalog."default",
    "lastName" text COLLATE pg_catalog."default",
    "profileImage" text COLLATE pg_catalog."default",
    rating real,
    "proofOfIdentity" text COLLATE pg_catalog."default",
    "parentId" uuid,
    CONSTRAINT "Children_pkey" PRIMARY KEY (id),
    CONSTRAINT "Children_parentId_fkey" FOREIGN KEY ("parentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Children"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Children"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Children" TO anon;

GRANT ALL ON TABLE public."Children" TO authenticated;

GRANT ALL ON TABLE public."Children" TO postgres;

GRANT ALL ON TABLE public."Children" TO service_role;

GRANT ALL ON TABLE public."Children" TO supabase_admin;

CREATE TABLE IF NOT EXISTS public."Addresses"
(
    created_at timestamp with time zone DEFAULT now(),
    "schoolId" uuid,
    "teacherId" uuid,
    line1 text COLLATE pg_catalog."default",
    line2 text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default",
    "stateCountyProvince" text COLLATE pg_catalog."default",
    "zipCode" text COLLATE pg_catalog."default",
    "countryName" text COLLATE pg_catalog."default",
    "countryCode" text COLLATE pg_catalog."default",
    "geoPoint" text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default",
    id uuid NOT NULL,
    "otherDetails" text COLLATE pg_catalog."default",
    CONSTRAINT "Addresses_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses" TO anon;

GRANT ALL ON TABLE public."Addresses" TO authenticated;

GRANT ALL ON TABLE public."Addresses" TO postgres;

GRANT ALL ON TABLE public."Addresses" TO service_role;

GRANT ALL ON TABLE public."Addresses" TO supabase_admin;

    CREATE TABLE IF NOT EXISTS public."Subcategories"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "categoryId" uuid,
    name text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    picture text COLLATE pg_catalog."default",
    CONSTRAINT "Subcategories_pkey" PRIMARY KEY (id),
    CONSTRAINT "Subcategories_categoryId_fkey" FOREIGN KEY ("categoryId")
        REFERENCES public."Categories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Subcategories"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Subcategories"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Subcategories" TO anon;

GRANT ALL ON TABLE public."Subcategories" TO authenticated;

GRANT ALL ON TABLE public."Subcategories" TO postgres;

GRANT ALL ON TABLE public."Subcategories" TO service_role;

GRANT ALL ON TABLE public."Subcategories" TO supabase_admin;


    CREATE TABLE IF NOT EXISTS public."Schools"
(
    created_at timestamp with time zone DEFAULT now(),
    name text COLLATE pg_catalog."default",
    id uuid NOT NULL,
    CONSTRAINT "Schools_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Schools"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Schools"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Schools" TO anon;

GRANT ALL ON TABLE public."Schools" TO authenticated;

GRANT ALL ON TABLE public."Schools" TO postgres;

GRANT ALL ON TABLE public."Schools" TO service_role;

GRANT ALL ON TABLE public."Schools" TO supabase_admin;

    CREATE TABLE IF NOT EXISTS public."Groups"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "time" time without time zone,
    "dayOfWeek" numeric,
    frequency text COLLATE pg_catalog."default",
    "schoolId" uuid,
    "teacherId" uuid,
    "maxOccupancy" numeric,
    "subcategoryId" uuid,
    "canBeSeenBy" text COLLATE pg_catalog."default",
    "otherDetails" text COLLATE pg_catalog."default",
    "levelFrom" numeric,
    "levelUpto" numeric,
    CONSTRAINT "Groups_pkey" PRIMARY KEY (id),
    CONSTRAINT "Groups_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Groups_subcategoryId_fkey" FOREIGN KEY ("subcategoryId")
        REFERENCES public."Subcategories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Groups_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Groups"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Groups"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Groups" TO supabase_admin;

GRANT ALL ON TABLE public."Groups" TO authenticated;

GRANT ALL ON TABLE public."Groups" TO anon;

GRANT ALL ON TABLE public."Groups" TO postgres;

GRANT ALL ON TABLE public."Groups" TO service_role;

CREATE TABLE IF NOT EXISTS public."LessonSchedules"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "scheduleTimeStart" time without time zone,
    "schedulaTimeEnd" time without time zone,
    "scheduleDate" date,
    "isBooked" boolean,
    "teacherId" uuid,
    "maxOccupancy" numeric,
    "subcategoryId" uuid,
    "isRegularGroup" boolean,
    "groupId" uuid,
    "canBeSeenBy" text COLLATE pg_catalog."default",
    "durationInMins" numeric,
    "feeForTheLesson" numeric,
    "feePerOccupant" numeric,
    "lateCancelationPenalty" numeric,
    "levelFrom" numeric,
    "levelUpto" numeric,
    "autoAddWaitingStudents" boolean,
  
    CONSTRAINT "LessenSchedule_pkey" PRIMARY KEY (id),
    CONSTRAINT "LessonSchedules_groupId_fkey" FOREIGN KEY ("groupId")
        REFERENCES public."Groups" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "LessonSchedules_subcategoryId_fkey" FOREIGN KEY ("subcategoryId")
        REFERENCES public."Subcategories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "LessonSchedules_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."LessonSchedules"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."LessonSchedules"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."LessonSchedules" TO supabase_admin;

GRANT ALL ON TABLE public."LessonSchedules" TO authenticated;

GRANT ALL ON TABLE public."LessonSchedules" TO anon;

GRANT ALL ON TABLE public."LessonSchedules" TO postgres;

GRANT ALL ON TABLE public."LessonSchedules" TO service_role;



CREATE TABLE IF NOT EXISTS public."Addresses_Groups"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "groupId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "addressId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    CONSTRAINT "Addresses_Groups_pkey" PRIMARY KEY ("groupId", "addressId"),
    CONSTRAINT "Addresses_Groups_addressId_fkey" FOREIGN KEY ("addressId")
        REFERENCES public."Addresses" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Addresses_Groups_groupId_fkey" FOREIGN KEY ("groupId")
        REFERENCES public."Groups" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses_Groups"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses_Groups"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses_Groups" TO supabase_admin;

GRANT ALL ON TABLE public."Addresses_Groups" TO authenticated;

GRANT ALL ON TABLE public."Addresses_Groups" TO anon;

GRANT ALL ON TABLE public."Addresses_Groups" TO postgres;

GRANT ALL ON TABLE public."Addresses_Groups" TO service_role;

CREATE TABLE IF NOT EXISTS public."TestTable"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    field text COLLATE pg_catalog."default" DEFAULT 'value1'::text,
    CONSTRAINT "TestTable_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."TestTable"
    OWNER to supabase_admin;

GRANT ALL ON TABLE public."TestTable" TO anon;

GRANT ALL ON TABLE public."TestTable" TO authenticated;

GRANT ALL ON TABLE public."TestTable" TO postgres;

GRANT ALL ON TABLE public."TestTable" TO service_role;

GRANT ALL ON TABLE public."TestTable" TO supabase_admin;



CREATE TABLE IF NOT EXISTS public."Addresses_Teachers"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "teacherId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "addressId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    CONSTRAINT "Addresses_Teachers_pkey" PRIMARY KEY ("teacherId", "addressId"),
    CONSTRAINT "Addresses_Teachers_addressId_fkey" FOREIGN KEY ("addressId")
        REFERENCES public."Addresses" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Addresses_Teachers_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses_Teachers"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses_Teachers"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses_Teachers" TO supabase_admin;

GRANT ALL ON TABLE public."Addresses_Teachers" TO authenticated;

GRANT ALL ON TABLE public."Addresses_Teachers" TO anon;

GRANT ALL ON TABLE public."Addresses_Teachers" TO postgres;

GRANT ALL ON TABLE public."Addresses_Teachers" TO service_role;

CREATE TABLE IF NOT EXISTS public."LobbySchedules"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "scheduleTimeStart" time without time zone,
    "schedulaTimeEnd" time without time zone,
    "scheduleDate" date,
    "creatorStudentId" uuid,
    "maxOccupancy" numeric,
    "subcategoryId" uuid,
    "canBeSeenBy" text COLLATE pg_catalog."default",
    "durationInMins" numeric,
    "feeForTheLesson" numeric,
    "feePerOccupant" numeric,
    "lateCancelationPenalty" numeric,
    "levelFrom" numeric,
    "levelUpto" numeric,
    "autoAddWaitingStudents" boolean,
    CONSTRAINT "LobbySchedule_pkey" PRIMARY KEY (id),
    CONSTRAINT "LobbySchedules_creatorStudentId_fkey" FOREIGN KEY ("creatorStudentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "LobbySchedules_subcategoryId_fkey" FOREIGN KEY ("subcategoryId")
        REFERENCES public."Subcategories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."LobbySchedules"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."LobbySchedules"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."LobbySchedules" TO supabase_admin;

GRANT ALL ON TABLE public."LobbySchedules" TO authenticated;

GRANT ALL ON TABLE public."LobbySchedules" TO anon;

GRANT ALL ON TABLE public."LobbySchedules" TO postgres;

GRANT ALL ON TABLE public."LobbySchedules" TO service_role;

CREATE TABLE IF NOT EXISTS public."Lobbies"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "studentId" uuid,
    "creatorStudentId" uuid,
    fee numeric,
    "studentComment" text COLLATE pg_catalog."default",
    "paymentId" uuid,
    "studentRating" numeric,
    "studentSkillLevelRating" numeric,
    "scheduleId" uuid,
    "hasLobbyEnded" boolean,
    "hasLobbyStarted" boolean,
    "isCancelledByCreator" boolean,
    "isCancelledByParticipant" boolean,
    "isInWaitingList" boolean,
    "isAccepted" boolean,
    CONSTRAINT "Lobbies_pkey" PRIMARY KEY (id),
    CONSTRAINT "Lobbies_creatorStudentId_fkey" FOREIGN KEY ("creatorStudentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Lobbies_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LobbySchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Lobbies_studentId_fkey" FOREIGN KEY ("studentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Lobbies"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Lobbies"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Lobbies" TO supabase_admin;

GRANT ALL ON TABLE public."Lobbies" TO authenticated;

GRANT ALL ON TABLE public."Lobbies" TO anon;

GRANT ALL ON TABLE public."Lobbies" TO postgres;

GRANT ALL ON TABLE public."Lobbies" TO service_role;

CREATE TABLE IF NOT EXISTS public."Lessons"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "studentId" uuid,
    "teacherId" uuid,
    fee numeric,
    "studentComment" text COLLATE pg_catalog."default",
    "teacherComment" text COLLATE pg_catalog."default",
    "paymentId" uuid,
    "studentRating" numeric,
    "teacherRating" numeric,
    "studentSkillLevelRating" numeric,
    "scheduleId" uuid,
    "hasLessonEnded" boolean,
    "hasLessonEndedEarly" boolean,
    "hasLessonStarted" boolean,
    "isCancelledByStudent" boolean,
    "isCancelledByTeacher" boolean,
    "IDealWithBooking" boolean,
    "isInWaitingList" boolean,
    "isAccepted" boolean,
    "isChild" boolean,
    CONSTRAINT "Lessons_pkey" PRIMARY KEY (id),
    CONSTRAINT "Lessons_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LessonSchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Lessons_studentId_fkey" FOREIGN KEY ("studentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Lessons_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Lessons"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Lessons"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Lessons" TO supabase_admin;

GRANT ALL ON TABLE public."Lessons" TO authenticated;

GRANT ALL ON TABLE public."Lessons" TO anon;

GRANT ALL ON TABLE public."Lessons" TO postgres;

GRANT ALL ON TABLE public."Lessons" TO service_role;

CREATE TABLE IF NOT EXISTS public."Teachers_Subcategories"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "subcategoryId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "teacherId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "feePerHour" numeric,
    "levelFrom" numeric,
    "levelUpto" numeric,
    "otherDetails" text COLLATE pg_catalog."default",
    CONSTRAINT "Teachers_Subcategories_pkey" PRIMARY KEY ("subcategoryId", "teacherId"),
    CONSTRAINT "Teachers_Subcategories_subcategoryId_fkey" FOREIGN KEY ("subcategoryId")
        REFERENCES public."Subcategories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Teachers_Subcategories_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Teachers_Subcategories"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Teachers_Subcategories"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Teachers_Subcategories" TO supabase_admin;

GRANT ALL ON TABLE public."Teachers_Subcategories" TO authenticated;

GRANT ALL ON TABLE public."Teachers_Subcategories" TO anon;

GRANT ALL ON TABLE public."Teachers_Subcategories" TO postgres;

GRANT ALL ON TABLE public."Teachers_Subcategories" TO service_role;

COMMENT ON TABLE public."Teachers_Subcategories"
    IS 'Joint table for teachers and subcategories';



CREATE TABLE IF NOT EXISTS public."Addresses_Schools"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "schoolId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "addressId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    CONSTRAINT "Addresses_Schools_pkey" PRIMARY KEY ("schoolId", "addressId"),
    CONSTRAINT "Addresses_Schools_addressId_fkey" FOREIGN KEY ("addressId")
        REFERENCES public."Addresses" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Addresses_Schools_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses_Schools"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses_Schools"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses_Schools" TO supabase_admin;

GRANT ALL ON TABLE public."Addresses_Schools" TO authenticated;

GRANT ALL ON TABLE public."Addresses_Schools" TO anon;

GRANT ALL ON TABLE public."Addresses_Schools" TO postgres;

GRANT ALL ON TABLE public."Addresses_Schools" TO service_role;

CREATE TABLE IF NOT EXISTS public."Groups_Students"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "groupId" uuid NOT NULL,
    "studentId" uuid NOT NULL,
    "schoolId" uuid NOT NULL,
    "trainingLoadBalance" numeric,
    "isInWaitingList" boolean,
    "isAccepted" boolean,
    "reasonForRejection" text COLLATE pg_catalog."default",
    CONSTRAINT "Groups_Students_pkey" PRIMARY KEY ("groupId", "studentId", "schoolId"),
    CONSTRAINT "Groups_Students_groupId_fkey" FOREIGN KEY ("groupId")
        REFERENCES public."Groups" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Groups_Students_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Groups_Students_studentId_fkey" FOREIGN KEY ("studentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Groups_Students"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Groups_Students"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Groups_Students" TO supabase_admin;

GRANT ALL ON TABLE public."Groups_Students" TO authenticated;

GRANT ALL ON TABLE public."Groups_Students" TO anon;

GRANT ALL ON TABLE public."Groups_Students" TO postgres;

GRANT ALL ON TABLE public."Groups_Students" TO service_role;

CREATE TABLE IF NOT EXISTS public."LessonScheduleTimes"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    "scheduleId" uuid,
    "time" time without time zone,
    "isBooked" boolean,
    CONSTRAINT "LessonScheduleTimes_pkey" PRIMARY KEY (id),
    CONSTRAINT "LessonScheduleTimes_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LessonSchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."LessonScheduleTimes"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."LessonScheduleTimes"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO anon;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO authenticated;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO postgres;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO service_role;

CREATE TABLE IF NOT EXISTS public."LobbyScheduleTimes"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    "scheduleId" uuid,
    "time" time without time zone,
    CONSTRAINT "LobbyScheduleTimes_pkey" PRIMARY KEY (id),
    CONSTRAINT "LobbyScheduleTimes_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LessonSchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."LessonScheduleTimes"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."LessonScheduleTimes"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO anon;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO authenticated;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO postgres;

GRANT ALL ON TABLE public."LessonScheduleTimes" TO service_role;



CREATE TABLE IF NOT EXISTS public."Teachers_Schools"
(
    created_at timestamp with time zone DEFAULT now(),
    "teacherId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "invitationAccepted" boolean,
    "isInvitationFromSchool" boolean,
    "isInvitationFromTeacher" boolean,
    "schoolId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    id uuid NOT NULL,
    CONSTRAINT "Teachers_Schools_pkey" PRIMARY KEY ("teacherId", "schoolId"),
    CONSTRAINT "Teachers_Schools_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Teachers_Schools_teacherId_fkey" FOREIGN KEY ("teacherId")
        REFERENCES public."Teachers" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Teachers_Schools"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Teachers_Schools"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Teachers_Schools" TO anon;

GRANT ALL ON TABLE public."Teachers_Schools" TO authenticated;

GRANT ALL ON TABLE public."Teachers_Schools" TO postgres;

GRANT ALL ON TABLE public."Teachers_Schools" TO service_role;

GRANT ALL ON TABLE public."Teachers_Schools" TO supabase_admin;



CREATE TABLE IF NOT EXISTS public."Students_Schools"
(
    created_at timestamp with time zone DEFAULT now(),
    "studentId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "invitationAccepted" boolean,
    "isInvitationFromSchool" boolean,
    "isInvitationFromTeacher" boolean,
    "schoolId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    id uuid NOT NULL,
    CONSTRAINT "Students_Schools_pkey" PRIMARY KEY ("studentId", "schoolId"),
    CONSTRAINT "Students_Schools_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Students_Schools_studentId_fkey" FOREIGN KEY ("studentId")
        REFERENCES public."Students" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Students_Schools"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Students_Schools"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Students_Schools" TO anon;

GRANT ALL ON TABLE public."Students_Schools" TO authenticated;

GRANT ALL ON TABLE public."Students_Schools" TO postgres;

GRANT ALL ON TABLE public."Students_Schools" TO service_role;

GRANT ALL ON TABLE public."Students_Schools" TO supabase_admin;



CREATE TABLE IF NOT EXISTS public."Schools_Subcategories"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "subcategoryId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "schoolId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "otherDetails" text COLLATE pg_catalog."default",
    CONSTRAINT "Schools_Subcategories_pkey" PRIMARY KEY ("subcategoryId", "schoolId"),
    CONSTRAINT "Schools_Subcategories_schoolId_fkey" FOREIGN KEY ("schoolId")
        REFERENCES public."Schools" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Schools_Subcategories_subcategoryId_fkey" FOREIGN KEY ("subcategoryId")
        REFERENCES public."Subcategories" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Schools_Subcategories"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Schools_Subcategories"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Schools_Subcategories" TO supabase_admin;

GRANT ALL ON TABLE public."Schools_Subcategories" TO authenticated;

GRANT ALL ON TABLE public."Schools_Subcategories" TO anon;

GRANT ALL ON TABLE public."Schools_Subcategories" TO postgres;

GRANT ALL ON TABLE public."Schools_Subcategories" TO service_role;

CREATE TABLE IF NOT EXISTS public."Addresses_LessonSchedules"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "scheduleId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "addressId" uuid NOT NULL DEFAULT uuid_generate_v4(),
    CONSTRAINT "Addresses_LessonSchedules_pkey" PRIMARY KEY ("scheduleId", "addressId"),
    CONSTRAINT "Addresses_LessonSchedules_addressId_fkey" FOREIGN KEY ("addressId")
        REFERENCES public."Addresses" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Addresses_LessonSchedules_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LessonSchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses_LessonSchedules"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses_LessonSchedules"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses_LessonSchedules" TO supabase_admin;

GRANT ALL ON TABLE public."Addresses_LessonSchedules" TO authenticated;

GRANT ALL ON TABLE public."Addresses_LessonSchedules" TO anon;

GRANT ALL ON TABLE public."Addresses_LessonSchedules" TO postgres;

GRANT ALL ON TABLE public."Addresses_LessonSchedules" TO service_role;

CREATE TABLE IF NOT EXISTS public."Addresses_LobbySchedules"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "scheduleId" uuid,
    "addressId" uuid,
    CONSTRAINT "Addresses_Lobbies_pkey" PRIMARY KEY (id),
    CONSTRAINT "Addresses_LobbySchedules_addressId_fkey" FOREIGN KEY ("addressId")
        REFERENCES public."Addresses" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Addresses_LobbySchedules_scheduleId_fkey" FOREIGN KEY ("scheduleId")
        REFERENCES public."LobbySchedules" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Addresses_LobbySchedules"
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public."Addresses_LobbySchedules"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Addresses_LobbySchedules" TO supabase_admin;

GRANT ALL ON TABLE public."Addresses_LobbySchedules" TO authenticated;

GRANT ALL ON TABLE public."Addresses_LobbySchedules" TO anon;

GRANT ALL ON TABLE public."Addresses_LobbySchedules" TO postgres;

GRANT ALL ON TABLE public."Addresses_LobbySchedules" TO service_role;
